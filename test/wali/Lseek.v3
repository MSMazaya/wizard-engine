import component wali {
	def SYS_open(pathname: Pointer, flags: i32, mode: i32) -> i64;
	def SYS_close(fd: i32) -> i64;
	def SYS_lseek(fd: i32, offset: i64, whence: i32) -> i64;
	def SYS_read(fd: i32, buf: Pointer, count: i32) -> i64;
}

def SEEK_SET = 0;

// Tests that using lseek to reset file read index works
def main() -> i64 {
	var str = "read.txt\x00";
	var first_read = Array<byte>.new(5);
	var second_read = Array<byte>.new(5);
	var fd = wali.SYS_open(Pointer.atContents(str), 0, 0);
	wali.SYS_read(i32.view(fd), Pointer.atContents(first_read), first_read.length);
	// Reset index using lseek
	var ret = wali.SYS_lseek(i32.view(fd), 0, SEEK_SET);
	wali.SYS_read(i32.view(fd), Pointer.atContents(second_read), second_read.length);
	wali.SYS_close(i32.view(fd));
	if (ret != -1 && equal(first_read, second_read))
		return 0;
	return 1;
}

def equal(arr1: string, arr2: string) -> bool {
	if (arr1 == arr2) return true;
	if (arr1.length != arr2.length) return false;
	for (i < arr1.length) {
		if (arr1[i] != arr2[i]) return false;
	}
	return true;
}
