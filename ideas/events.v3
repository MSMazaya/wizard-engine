// Copyright 2025 Wizard authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Events for lifetime management of module and instance handles.
export "wizeng:module.def(moddecl)" def module_def(moddecl: u32);
export "wizeng:instance.def(moddecl,instance)" def module_def(moddecl: u32, instance: u32);
export "wizeng:module.free(moddecl)" def module_free(moddecl: u32);
export "wizeng:instance.free(instance)" def module_free(moddecl: u32);

// Generic memory accesses.
export "wasm:memory.new(memdecl,instance,meminst)" def memory_new(memdecl: u32, instance: u32, meminst: u32);
export "wasm:memory.read(meminst,addr,size)" def memory_read(meminst: u32, addr: u64, size: u64);
export "wasm:memory.grow(meminst,pages)" def memory_grow(meminst: u32, pages: u64);
export "wasm:memory.write(meminst,addr,size)" def memory_write(meminst: u32, addr: u64, size: u64);

// Frame events.
export "wasm:frame.def(instance,funcid)" def frame_def(instance: u32, funcid: u32);
export "wasm:frame:enter(frameid)" def frame_enter(frameid: u32);
export "wasm:throw(frameid,taginst)" def throw(frameid: u32, taginst: u32);
export "wasm:catch(frameid,taginst)" def catch(frameid: u32, taginst: u32);
export "wasm:frame:return(frameid)" def frame_return(frameid: u32);
export "wasm:frame:unwind(frameid,taginst)" def frame_return(frameid: u32, taginst: u32);

// Continuation events.
export "wasm:cont_new(contid,taginst)" def cont_new(contid: u32, taginst: u32);
export "wasm:cont_resume(contid)" def cont_resume(contid: u32);
export "wasm:cont_suspend(contid,taginst)" def cont_suspend(contid: u32);

// Garbage collection events.
export "wizeng.gc.alloc(typeid,size)" def gc_alloc(typeid: u32, size: u64);
export "wizeng:gc.start(timestamp_us,heapsize)" def gc_start(timestamp: u64, heapsize: u64);
export "wizeng:gc.end(timestamp_us,heapsize)" def gc_end(timestamp: u64, heapsize: u64);

// Thread events.
export "wizeng:thread.new(threadid)" def thread_new(threadid: u32);
export "wizeng:thread.pause(threadid)"  def thread_pause(threadid: u32);
export "wizeng:thread.block(threadid)"  def thread_block(threadid: u32);

export "wizeng:spc:compile(duration_us,moddecl,funcid)" def spc_compile(duration: u64, moddecl: u32, funcid: u32);
export "wizeng:spc:bailout(moddecl,funcid)" def spc_bailout(moddecl: u32, funcid: u32);
export "wizeng:spc:deopt(moddecl,funcid)" def spc_deopt(moddecl: u32, funcid: u32);
export "wizeng:spc:osr(moddecl,funcid)" def spc_osr(moddecl: u32, funcid: u32);

export "wizeng:probe.insert(moddecl,funcid,pc,probeid)" def probe_insert(moddecl: u32, funcid: u32, pc: u32, probeid: u32);
export "wizeng:probe.fire(moddecl,funcid,pc,probeid)" def probe_fire(moddecl: u32, funcid: u32, pc: u32, probeid: u32);
export "wizeng:probe.remove(moddecl,funcid,pc,probeid)" def probe_remove(moddecl: u32, funcid: u32, pc: u32, probeid: u32);

/*
Ideas for events and control APIs

Wasm Events	 	arguments
------------------------------------------
alloc struct/array instance
read/write access
  - memory location
  - table element
  - global
  - object
  - field
frame unwind
throw exception
catch exception
trap

Sub-wasm Events
-------------------------------------------
single-step
gc:start/end
object freed
binding between module
lock acquire/release
thread switch
thread block
thread resume
compile function
deopt function
OSR frame
insert/remove probe
load module
validation error
linking error
OS-level signal
I/O to files, sockets

Command/APIs
------------------------------------------
load wasm module
create new instance, memory, memory, global, table, funcref
insert probe on event
remove probe on event
compile/deopt function
tune parameters
  - GC heuristics
  - compiler heuristics
  - interpreter heuristics

APIs
------------------------------------------
frame accessor
  - get/set local
  - get/set operand
  - get pc, func, instance
  - get depth
  - get caller
lock
  - get owner
mirror on
  - module
  - instance
  - memory
  - global
  - table
  - funcref
redefine
  - function
  - module
list loaded modules
list instances
list threads
get resource usage
deliver signal/async event
dump core
*/
