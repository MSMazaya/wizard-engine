component WaliImpl {
	def passthrough<T>(num: int, args: T, fdmap: FileDescriptorMap, memory: Memory) -> HostResult {
		var r = Linux.syscall(num, args);
		return HostResult.Value1(Values.box_l(r.0));
	}
	def open(num: int, args: (Pointer, u32, u32), fdmap: FileDescriptorMap, memory: Memory) -> HostResult {
		var r = Linux.syscall(num, args);
		if (r.0 < 0) return HostResult.Value1(Values.box_l(r.0));
		var fd = fdmap.alloc();
		fdmap.set(fd, int.!(r.0));
		return HostResult.Value1(Values.box_l(fd));
	}
	def dup(num: int, args: (i32), fdmap: FileDescriptorMap, memory: Memory) -> HostResult {
		var r = Linux.syscall(num, args);
		if (r.0 < 0) return HostResult.Value1(Values.box_l(r.0));
		var fd = fdmap.alloc();
		fdmap.set(fd, int.!(r.0));
		return HostResult.Value1(Values.box_l(fd));
	}
	def close(num: int, args: (i32), fdmap: FileDescriptorMap, memory: Memory) -> HostResult {
		var r = Linux.syscall(num, args);
		fdmap.free(args);
		return HostResult.Value1(Values.box_l(args));
	}
}
