def EBADFD = HostResult.Value1(Values.box_i(LinuxConst.EBADFD));

component WaliCheck {
	def getFd(fdmap: FileDescriptorMap, arg: Value) -> int {
		return fdmap.get(Values.unbox_i(arg));
	}
	def getPath(memory: Memory, arg: Value) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(arg);
		return memory.range_o_32z(ptr, u32.!(LinuxConst.MAXPATHLEN));
	}
	def getRegion(memory: Memory, args: Range<Value>, n: int) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(args[n]);
		var len = Values.unbox_u(args[n+1]);
		return memory.range_ol_32(ptr, len);
	}
	def getRegionOf(memory: Memory, args: Range<Value>, n: int, len: u32) -> MaybeTrap<Range<byte>> {
		var ptr = Values.unbox_u(args[n]);
		return memory.range_ol_32(ptr, len);
	}
	def FD_POINTER_LEN_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> ((i32, Pointer, i32), HostResult) {
		var err_retval = (0, Pointer.NULL, 0);
		var sysfd = getFd(fdmap, args[0]);
		var range = getRegion(memory, args, 1);
		if (sysfd < 0) return (err_retval, EBADFD);
		if (range.reason != TrapReason.NONE) return (err_retval, range.toHostResultThrow());
		var retval = ((sysfd, Pointer.atContents(range.result), range.result.length));
		return (retval, HostResult.Value0);
	}
	def FD_L_I_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> ((i32, i64, i32), HostResult) {
		var err_retval = (0, 0, 0);
		var sysfd = getFd(fdmap, args[0]);
		if (sysfd < 0) return (err_retval, EBADFD);
		var arg1 = Values.unbox_l(args[1]);
		var arg2 = Values.unbox_i(args[2]);
		var retval = ((sysfd, arg1, arg2));
		return (retval, HostResult.Value0);
	}
	def FD_I_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> ((i32, i32), HostResult) {
		var err_retval = (0, 0);
		var sysfd = getFd(fdmap, args[0]);
		if (sysfd < 0) return (err_retval, EBADFD);
		var arg1 = Values.unbox_i(args[1]);
		var retval = ((sysfd, arg1));
		return (retval, HostResult.Value0);
	}
	def FD_I_I_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> ((i32, i32, i32), HostResult) {
		var err_retval = (0, 0, 0);
		var sysfd = getFd(fdmap, args[0]);
		if (sysfd < 0) return (err_retval, EBADFD);
		var arg1 = Values.unbox_i(args[1]);
		var arg2 = Values.unbox_i(args[2]);
		var retval = ((sysfd, arg1, arg2));
		return (retval, HostResult.Value0);
	}
	def PATH_U_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> ((Pointer, u32), HostResult) {
		var err_retval = (Pointer.NULL, 0u);
		var path = getPath(memory, args[0]);
		var arg1 = Values.unbox_u(args[1]);
		if (path.reason != TrapReason.NONE) return (err_retval, path.toHostResultThrow());
		var retval = ((Pointer.atContents(path.result), arg1));
		return (retval, HostResult.Value0);
	}
	def PATH_U_U_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> ((Pointer, u32, u32), HostResult) {
		var err_retval = (Pointer.NULL, 0u, 0u);
		var path = getPath(memory, args[0]);
		var arg1 = Values.unbox_u(args[1]);
		var arg2 = Values.unbox_u(args[2]);
		if (path.reason != TrapReason.NONE) return (err_retval, path.toHostResultThrow());
		var retval = ((Pointer.atContents(path.result), arg1, arg2));
		return (retval, HostResult.Value0);
	}
	def FD_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> (i32, HostResult) {
		var err_retval = (0);
		var fd = Values.unbox_i(args[0]);
		var sysfd = fdmap.get(fd);
		if (sysfd < 0) return (err_retval, EBADFD);
		return (sysfd, HostResult.Value0);
	}
	def PATH_STAT_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> ((Pointer, Pointer), HostResult) {
		var err_retval = (Pointer.NULL, Pointer.NULL);
		var path = getPath(memory, args[0]);
		if (path.reason != TrapReason.NONE) return (err_retval, path.toHostResultThrow());
		var range = getRegionOf(memory, args, 1, u32.!(wali_stat.size));
		if (range.reason != TrapReason.NONE) return (err_retval, range.toHostResultThrow());
		// var incoming = Ref<wali_stat>.of(range.val);
		// TODO: layout adjustment for minor stat buffer changes
		var retval = (Pointer.atContents(path.result), Pointer.atContents(range.result));
		return (retval, HostResult.Value0);
	}
	def Void_UNWRAP(fdmap: FileDescriptorMap, memory: Memory, args: Range<Value>) -> ((), HostResult) {
		return ((), HostResult.Value0);
	}
	def Syscall<T>(fdmap: FileDescriptorMap,
			memory: Memory,
			args: Range<Value>,
			getArgs: (FileDescriptorMap, Memory, Range<Value>) -> (T, HostResult),
			syscall_num: int,
			syscall: (int, T, FileDescriptorMap, Memory) -> HostResult) -> HostResult {
	   var res: (T, HostResult) = getArgs(fdmap, memory, args);
	   var args = res.0;
	   var host_result = res.1;
	   if (host_result != HostResult.Value0) return host_result;
	   return syscall(syscall_num, T.!(args), fdmap, memory);
	}
}
